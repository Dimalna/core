import { JWKInterface } from "arweave/node/lib/wallet";
import { OptionValues } from "commander";
import { BlockInstructions } from "./faces";
import { CLI } from "./utils";
export * from "./utils";
declare class KYVE {
    private pool;
    private runtime;
    private version;
    private stake;
    private commission;
    private wallet;
    private keyfile?;
    private name;
    private gasMultiplier;
    private poolState;
    private client;
    constructor(poolAddress: string, runtime: string, version: string, stakeAmount: string, commissionAmount: string, privateKey: string, keyfile?: JWKInterface, name?: string, endpoint?: string, gasMultiplier?: string, verbose?: boolean);
    static generate(cli?: CLI): Promise<{
        node: KYVE;
        options: OptionValues;
    }>;
    start(): Promise<void>;
    private run;
    createBundle(config: any, blockInstructions: BlockInstructions): Promise<any>;
    validate(uploadBundle: any[], uploadBytes: number, downloadBundle: any[], downloadBytes: number): Promise<boolean>;
    private getBlockProposal;
    private getBlockInstructions;
    private uploadBundleToArweave;
    private submitBlockProposal;
    private waitForNextBlockInstructions;
    private vote;
    private logNodeInfo;
    private fetchPoolState;
    private checkIfNodeIsValidator;
    private setupNodeStake;
    private selfStake;
    private selfUnstake;
    private setupNodeCommission;
    private calculateUploaderWaitingTime;
}
export default KYVE;
